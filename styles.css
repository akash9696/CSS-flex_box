/* Global Resets */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
/* Container */
.container {
    padding: 10px;
    background-color: #ccc;
    /* height: 1500px; */
}
 /* Items Inside the Container */
.item {
    background-color: #f1425d;
    padding: 30px;
    margin: 30px;
    color: #fff;
    font-size: 40px;
}

/*? First Set Of Properties to be set on the `Container` */
    /*! 1. display: flex; */
        /* The first thing we have to do in order to use the flexbox is to set the display property to `flex` of the `container` class. */
        .container {
            display: flex; 
            /* By adding this property - All the child elements inside the `container` class become flex items and are now displayed side by side. */
        }
    /* -------------------*/

    /*! 2. flex-direction: ; */
        .container {
            flex-direction: row;
            /* By adding this property - We can set the direction of the `Main Axis` */

            /* Now we can imagine that this will be very handy for responsive designs for example on a smaller screen we can set the flex direction to column and then the elements 
               will all be on top of one another. */
        }
    /* -----------------------------------------------------------*/

    /*! 3. justify-content: ; */
        .container {
            justify-content: center;
            /*  This property is used to control how the items should be positioned along the `main axis`
                Arguments -
                1. center - 
                    By applying this all the items/entire-content are now in the center of the container
                    It would be much harder to create this very simple layout with a float layout
                    But It doesn't do anything to the space that's between the items, 
                    Because the space that we have between them is defined by the `margin: 30px;` that we declared in the main `item` class.
                2. space-between 
                3. space-around
                4. space-evenly
                5. flex-end
                6. flex-start  */              
        }
    /* -----------------------------------------------------------*/

    /*! 4. align-items: ; */
        .container {
            align-items: center;
            /*  This property is used to control how the items should be positioned along the `cross axis`
                Now in order for this to work, we actually need one of the item to be bigger than all others, 
                because right now, they are already perfectly aligned along the cross-axis. 
                But if we make one of them bigger than the others, than we can experiment with different alignment along the cross axis.

                For this to work we already added a class `i2` for the 2nd item.
                And now we will work with that class.
                First of all add some height lets say `height: 200px;` to the i2 class and keep `align-items` blank which is equals to its default value which is `stretch` 
                As the moment we changed the height of item-2, all the items growed not just the i2 on which we defined the height.
                1. stretch
                And this is because the intial value on align items is stretch.   
                It simply stretches all the other elements to match the height of the flex item
                2. center
                Now if we change the value of `align-items` to `center` we will see what is orientation along the cross axis means.
                We will basically centered all the items in the vertical direction relative to the 2 item which is bigger, 
                just by setting `align-items: center;` and making one element bigger than the others.
                3. flex-start
                And if we change the `align-items` to `flex-start` then all the items will get aligned nicely at the top.
                4. flex-end
                And if we change the `align-items` to `flex-end` then all the items will get aligned nicely to the end.

                All of this happens along the cross-axis(up to down).

                5. baseline
                It basically align the text of the flex items along a line or you can say their common text, 
                If you draw an imaginary line under the texts you will see that they are completely aligned.
                And for this we have to increase the font size of item 4 with the help of class `i4`  to 70/90 pixels and change the `align-items` to `baseline`.
                */  
                            
        }

        .i2 {
            height: 200px;
        }

        .i4 {
            font-size: 70px;
        }
    /* --------------------------------------------------------*/


    /*! 5. flex-wrap: ;*/
    /*! 6. align-content: ; */
    /* We will dicuss these property in a Future Lecture */

    /*! What happens with the `justify-content`, and `align-items` when we change the flex direction to `column`*/
        .container {
            flex-direction: column;
            /*  After doing this the main direction is no longer going from the left to the right, but from the top to the bottom.
                But the item are now horizontally centered, Why?
                Because the `align-items` property are set to center.
                Basically the horizontal centering is now in the cross direction 
                And remember that `align-items` is the property that controls the positioning along the cross axis. 
               
                Now let's set `align-items` to `flex-start`. */
                align-items: flex-start;
                /* Now it's at the beginning of the cross axis which now goes now goes from left to right. 
                   Now if we set it to `flex-end` then all of these move to the right side. 
               
                    That's why it's really important to keep track of where the main and the cross axis are situated 
                    in order to use the justify content and align items properties in the correct way 
                
                    And now, just to see how the `justify-content` works in this situation let's just increase the height of this container 
                    to 1500 pixels */
                    height: 1500px;
                    /*  And so you see that the items are now basically centered in the container,
                        So, the space at the bottom of items is as same as the space at the top.
                        Once again, why is that?
                        
                        It's because `justify-content` is set to center. So, along the main axis these items are now 
                        centered and this axis is now going from top to the bottom. */
            
        }
/*? ----------------------END--------------------------- */


/*? Second Set Of Properties to be set on the `Container's Items` */
    /*! First we have to Set container's basic properties for this Section  */
    .container {
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        height: 500px;
    }

/*! 1. align-self:  */
    /*  Basically this property overrides the `align-contents` property for one individual item. */
    .i4 {
        align-self: flex-end;
        /*  Right now, the `align-items` is set to `center` so all the items are now centered along the cross axis which is from top to bottom. 
            But if we wanna override that for one individual item, we can use `align-self` and set it to `flex-end` or `flex-start`.
            Now we can see in preview that all the flex items except the 4th one are aligned to the center and 
            the 4th one is at the bottom of container.
            Using `align-self: strectch;` is very useful,
            Because now this item-4 is actually stretched to its maximum in order to fill the entire container.
            
            And again put it back to the `flex-end` */
    }
/* ---------------- */

/*! 2. order:  */
    /*  Initial value of order is zero. 
        So if we wanna put one of the 5 elements at the beginning all we need to do is to put the value which is lower than zero for the order 
        So, "order: -1"*/
        .i4 {
            order: -1;
        }
        /*  Now this item will go to the Start 
            Why's that? 
            Becuase Flexbox orders all of these elements according to their order number, ordering from the lowest order number. 
            If we set order for item-3 to 1 */
            .i3 {
                order: 1;
            }
            /*  Then this item-3 moves to the end of the container or you can say right side.
                And that's actually pretty useful, for responsive design in order to change position 
                for some elements on a smaller or on a bigger screen */
/* ----------- */

/*! 3. flex-grow: ;  */
    /*  It is the ability of an element to grow And what we do is to specify an integer, a number like we did in the `order`.
        First we want to do is to set flex on all the items. */
        .item {
            flex-grow: 1;
        }
        /*  So all of the `item` are now occupy the entire space that they can, in other words, they growed as much as they can. */

        /*  We can see it even better if we remove margin of the item to `margin: 0px;` */
        .item {
            margin: 0px;
        }
        /*  So now they're actually touching one another.
            If we set all of the item to a higher number like 2 or 3 or even 23, it doesn't really matter, because this number only matters
            in relation to other numbers. 
            An example of that is 
            To set flex-grow to 1 and put some margin back on item */
            .item {
                flex-grow: 1;
                margin: 40px;
            }
            /*  But this time set `flex-grow: 2;` for the item 2 */
                .i2 {
                    flex-grow: 2;
                }
                /*  Item 2 is now double the size of the other ones, That's because 2 is double of 1,
                    So this one has twice the ability to grow than all the other flex items. */
/* ----------------- */

/*! 4. flex: ;  */

    /*  This is a shorthand property which stands for `flex-grow`, `flex-shrink`, and `flex-basis` 
        So saying flex-grow is actually the same thing as saying `flex: 1` */

    /*  So, a simple trick to expand a flex item to occupy as much width as it can is simply setting its flex property to 1 */

    /*  So let see what's happens if we just set `flex: 1;` on one of the item, Let's say on the item 3 
        and get rid of all other `flex-grow: ;` or comment out all the places where we declare `flex-grow: ;` above this line  */
        .i3 {
            flex: 1;
        }
        /*  So now this item occupies all the space that it can and then the remaining flex items just occupy the rest of the space */

/* ----------------- */

/*! 5. flex-basis: ;  */
    /*  With this one we can set the width of a flex item, Instead of using the width property on a flex item we usually use flex-basis. */
        .i2 {
            flex-basis: 20%;
        }
        /*  It is now occupying 20% of the container's width then these elements which basically have their flex-basis set to auto,
            which is the initial value for flex-basis.
            These elements occupy the space that they need, and then all the remaining space is occupied by the last element, item-3
            because its flex set to 1. */
/* ------------------ */

/*! 6. flex-shrink: ;  */
    /*  For this property let's actually change the `flex-basis: ;` of the item-2 to a pixle based value, let's say 300 pixels */
        .i2 {
            flex-basis: 300px;
        }
        /*  When we decreases the viewport width, `item-3` grows smaller and smaller because it has less and less space which it can occupy.
            as we further decreases the viewport width then the `item-2` also starts to decrease.
            So even if we set its flex-basis to 300 pixels, it still starts decreasing when there's no more available space. 
            
            But sometimes that's not exactly what we want, So we can actually change that using the `flex-shrink` property 
            
            Because `flex-shrink` controls how an element can shrink, It has the initial value of 1, 
            1 means that the element is basically allowed to shrink. 
            And that's why we see this behavior here, Where the element starts getting smaller and smaller as there is no more available space. 
            
            Now if we don't want this to happen, we simply set it to zero and with that the element is no longer allowed to shrink.
            Other elements simply get clipped basically from the viewport */
            .i2 {
                flex-shrink: 0;
            }

/* ------------------- */

/*! 4.1 (ref. to 4 property of this Second set of properties) */
/*! short hand property - `flex: ;`  */
    /*  Instead of having `flex-grow: ;`, `flex-basis: ;` and `flex-shrink: ;` we just use the shorthand because that's the best practice. */
            .i2 {
                flex: 0 0 300px;
            }
            /*  First is for flex-grow, Second is for flex-shrink and Third is for flex-basis.
                So that's exactly the thing that we had before without shorthand. */

            /*  But what we usually want is to let the item to be able to shrink. Because we don't want that situation 
                where the elements no longer fit the container. */
            .i2 {
                flex: 0 1 300px;
            }
/*? ----------------------------END------------------------------ */

